PROGRAM JSON.TEST
PASS=0 ; FAIL=0
JSON.STRING = ' {"name":"John Doe","age":30,"address":{"street":"123 Main St","city":"Anytown"},'
JSON.STRING:= ' "phones":["555-1234","555-5678",{"Phone": "555-1212", "Ext": 1234}] }'
CALL JSON.GET.OBJECT(JSON.STRING, JSON.ARRAY, ERR)
*
* Test for top level object
TEST=1  ; DESC="NO ERR PARSING" ; EXPECTED=\\                                          ; VALUE=ERR             ; GOSUB SHOW.RESULT
TEST=2  ; DESC="ATB 1 NAME"     ; EXPECTED=\name\                                      ; VALUE=JSON.ARRAY<1,1> ; GOSUB SHOW.RESULT
TEST=3  ; DESC="ATB 1 TYPE"     ; EXPECTED=\STRING\                                    ; VALUE=JSON.ARRAY<2,1> ; GOSUB SHOW.RESULT
TEST=4  ; DESC="ATB 1 VALUE"    ; EXPECTED=\John Doe\                                  ; VALUE=JSON.ARRAY<3,1> ; GOSUB SHOW.RESULT
TEST=5  ; DESC="ATB 2 NAME"     ; EXPECTED=\age\                                       ; VALUE=JSON.ARRAY<1,2> ; GOSUB SHOW.RESULT
TEST=6  ; DESC="ATB 2 TYPE"     ; EXPECTED=\NUMBER\                                    ; VALUE=JSON.ARRAY<2,2> ; GOSUB SHOW.RESULT
TEST=7  ; DESC="ATB 2 VALUE"    ; EXPECTED=30                                          ; VALUE=JSON.ARRAY<3,2> ; GOSUB SHOW.RESULT
TEST=8  ; DESC="ATB 3 NAME"     ; EXPECTED=\address\                                   ; VALUE=JSON.ARRAY<1,3> ; GOSUB SHOW.RESULT
TEST=9  ; DESC="ATB 3 TYPE"     ; EXPECTED=\OBJECT\                                    ; VALUE=JSON.ARRAY<2,3> ; GOSUB SHOW.RESULT
TEST=10 ; DESC="ATB 3 VALUE"    ; EXPECTED=\{"street":"123 Main St","city":"Anytown"}\ ; VALUE=JSON.ARRAY<3,3> ; GOSUB SHOW.RESULT
TEST=11 ; DESC="ATB 4 NAME"     ; EXPECTED=\phones\                                    ; VALUE=JSON.ARRAY<1,4> ; GOSUB SHOW.RESULT
TEST=12 ; DESC="ATB 4 TYPE"     ; EXPECTED=\ARRAY\                                     ; VALUE=JSON.ARRAY<2,4> ; GOSUB SHOW.RESULT
TEST=13 ; DESC="ATB 4 VALUE"    ; EXPECTED=\["555-1234","555-5678",{"Phone": "555-1212", "Ext": 1234}]\; VALUE=JSON.ARRAY<3,4> ; GOSUB SHOW.RESULT
*
* Test for embedded object inside object
CALL JSON.GET.OBJECT(JSON.ARRAY<3,3>,ADDR.ARRAY,ERR)
TEST=14 ; DESC="ADDRESS PARSE"  ; EXPECTED=\\            ; VALUE=ERR             ; GOSUB SHOW.RESULT
TEST=15 ; DESC="ADDR ATB 1 NAME"; EXPECTED=\street\      ; VALUE=ADDR.ARRAY<1,1> ; GOSUB SHOW.RESULT
TEST=16 ; DESC="ADDR ATB 1 TYPE"; EXPECTED=\STRING\      ; VALUE=ADDR.ARRAY<2,1> ; GOSUB SHOW.RESULT
TEST=17 ; DESC="ADDR ATB 1 VAL "; EXPECTED=\123 Main St\ ; VALUE=ADDR.ARRAY<3,1> ; GOSUB SHOW.RESULT
TEST=18 ; DESC="ADDR ATB 2 NAME"; EXPECTED=\city\        ; VALUE=ADDR.ARRAY<1,2> ; GOSUB SHOW.RESULT
TEST=19 ; DESC="ADDR ATB 2 TYPE"; EXPECTED=\STRING\      ; VALUE=ADDR.ARRAY<2,2> ; GOSUB SHOW.RESULT
TEST=20 ; DESC="ADDR ATB 3 VAL "; EXPECTED=\Anytown\     ; VALUE=ADDR.ARRAY<3,2> ; GOSUB SHOW.RESULT
*
* Test for embedded object inside array
CALL JSON.GET.ARRAY(JSON.ARRAY<3,4>,PHONES.REC,ERR)
TEST=21 ; DESC="PHONE PARSE"   ; EXPECTED=\\                                     ; VALUE=ERR                    ; GOSUB SHOW.RESULT
TEST=22 ; DESC="PHONE COUNT"   ; EXPECTED=3                                      ; VALUE=DCOUNT(PHONES.REC,@AM) ; GOSUB SHOW.RESULT
TEST=23 ; DESC="PHONE 1"       ; EXPECTED=\555-1234\                             ; VALUE=PHONES.REC<1>          ; GOSUB SHOW.RESULT
TEST=24 ; DESC="PHONE 2"       ; EXPECTED=\555-5678\                             ; VALUE=PHONES.REC<2>          ; GOSUB SHOW.RESULT
TEST=25 ; DESC="PHONE 3"       ; EXPECTED=\{"Phone": "555-1212", "Ext": 1234}\   ; VALUE=PHONES.REC<3>          ; GOSUB SHOW.RESULT
*
* Test for embedded object in array
CALL JSON.GET.OBJECT(PHONES.REC<3>,PHONE,ERR)
TEST=26 ; DESC="PHONE2 PARSE" ; EXPECTED=\\         ; VALUE=ERR        ; GOSUB SHOW.RESULT
TEST=27 ; DESC="PHONE2 Name1" ; EXPECTED=\Phone\    ; VALUE=PHONE<1,1> ; GOSUB SHOW.RESULT
TEST=28 ; DESC="PHONE2 Type1" ; EXPECTED=\STRING\   ; VALUE=PHONE<2,1> ; GOSUB SHOW.RESULT
TEST=29 ; DESC="PHONE2 Val1"  ; EXPECTED=\555-1212\ ; VALUE=PHONE<3,1> ; GOSUB SHOW.RESULT
TEST=30 ; DESC="PHONE2 Name2" ; EXPECTED=\Ext\      ; VALUE=PHONE<1,2> ; GOSUB SHOW.RESULT
TEST=31 ; DESC="PHONE2 Type2" ; EXPECTED=\NUMBER\   ; VALUE=PHONE<2,2> ; GOSUB SHOW.RESULT
TEST=32 ; DESC="PHONE2 Val2"  ; EXPECTED=1234       ; VALUE=PHONE<3,2> ; GOSUB SHOW.RESULT
*
* Test for null/empty key, and null/empty value in object
JSON.STRING = '{"": "", "null": "val2"}'
CALL JSON.GET.OBJECT(JSON.STRING,EMPTY,ERR)
TEST=33 ; DESC="EMPTY TEST PARSE" ; EXPECTED=\\       ; VALUE=ERR            ; GOSUB SHOW.RESULT
TEST=34 ; DESC="EMPTY TEST KEY"   ; EXPECTED=\\       ; VALUE=EMPTY<1,1>:ERR ; GOSUB SHOW.RESULT
TEST=35 ; DESC="EMPTY TEST TYPE"  ; EXPECTED=\STRING\ ; VALUE=EMPTY<2,1>:ERR ; GOSUB SHOW.RESULT
TEST=36 ; DESC="EMPTY TEST VALUE" ; EXPECTED=\\       ; VALUE=EMPTY<3,1>:ERR ; GOSUB SHOW.RESULT
TEST=37 ; DESC="EMPTY NULL INS"   ; EXPECTED=\val2\   ; VALUE=EMPTY<3,2>:ERR ; GOSUB SHOW.RESULT
*
* Test for embedded quotes, spaces, literals and numbers
JSON.STRING = '{ "Name": "Ian  \"Nerd King\"\tMcGowan", "Nerd": true, "Cool" : false, "Age" : 59  , "location":null }'
CALL JSON.GET.OBJECT(JSON.STRING,USER.INFO,ERR)
TEST=38 ; DESC="USER PARSE" ; EXPECTED=\\        ; VALUE=ERR            ; GOSUB SHOW.RESULT
TEST=39 ; DESC="NAME NAME"  ; EXPECTED=\Name\    ; VALUE=USER.INFO<1,1> ; GOSUB SHOW.RESULT
TEST=40 ; DESC="NAME TYPE"  ; EXPECTED=\STRING\  ; VALUE=USER.INFO<2,1> ; GOSUB SHOW.RESULT
TEST=41 ; DESC="NAME VAL"   ; EXPECTED='Ian  "Nerd King"\tMcGowan'      ; VALUE=USER.INFO<3,1> ; GOSUB SHOW.RESULT
TEST=42 ; DESC="NERD NAME"  ; EXPECTED=\Nerd\    ; VALUE=USER.INFO<1,2> ; GOSUB SHOW.RESULT
TEST=43 ; DESC="NERD TYPE"  ; EXPECTED=\LITERAL\ ; VALUE=USER.INFO<2,2> ; GOSUB SHOW.RESULT
TEST=44 ; DESC="NERD VAL"   ; EXPECTED="true"    ; VALUE=USER.INFO<3,2> ; GOSUB SHOW.RESULT
TEST=45 ; DESC="GEEK NAME"  ; EXPECTED=\Cool\    ; VALUE=USER.INFO<1,3> ; GOSUB SHOW.RESULT
TEST=46 ; DESC="GEEK TYPE"  ; EXPECTED=\LITERAL\ ; VALUE=USER.INFO<2,3> ; GOSUB SHOW.RESULT
TEST=47 ; DESC="GEEK VAL"   ; EXPECTED="false"   ; VALUE=USER.INFO<3,3> ; GOSUB SHOW.RESULT
TEST=48 ; DESC="AGE NAME"   ; EXPECTED=\Age\     ; VALUE=USER.INFO<1,4> ; GOSUB SHOW.RESULT
TEST=49 ; DESC="AGE TYPE"   ; EXPECTED=\NUMBER\  ; VALUE=USER.INFO<2,4> ; GOSUB SHOW.RESULT
TEST=50 ; DESC="AGE VAL"    ; EXPECTED=59        ; VALUE=USER.INFO<3,4> ; GOSUB SHOW.RESULT
TEST=51 ; DESC="LOC NAME"   ; EXPECTED=\location\; VALUE=USER.INFO<1,5> ; GOSUB SHOW.RESULT
TEST=52 ; DESC="LOC TYPE"   ; EXPECTED=\LITERAL\ ; VALUE=USER.INFO<2,5> ; GOSUB SHOW.RESULT
TEST=53 ; DESC="LOC VAL"    ; EXPECTED="null"    ; VALUE=USER.INFO<3,5> ; GOSUB SHOW.RESULT
*
* Tests for malformed JSON
JSON.STRING = \{ "name": "John Doe", "age": 30\
CALL JSON.GET.OBJECT(JSON.STRING, JSON.ARRAY, ERR)
TEST=54 ; DESC="Missing Closing Bracket" ; EXPECTED=\Error: Missing closing bracket\ ; VALUE=JSON.ARRAY:ERR ; GOSUB SHOW.RESULT
*
JSON.STRING = \{ "name": "John Doe" "age": 30 }\
CALL JSON.GET.OBJECT(JSON.STRING, JSON.ARRAY, ERR)
TEST=55 ; DESC="Missing Comma Between Elements" ; EXPECTED=\Error: Expected comma or closing brace at position:22\ ; VALUE=JSON.ARRAY:ERR ; GOSUB SHOW.RESULT
*
JSON.STRING = \{ "name": "John Doe", "age": 30, }\
CALL JSON.GET.OBJECT(JSON.STRING, JSON.ARRAY, ERR)
TEST=56 ; DESC="Trailing Comma" ; EXPECTED=\Error: Missing closing bracket\ ; VALUE=JSON.ARRAY:ERR ; GOSUB SHOW.RESULT
*
JSON.STRING = \{ name: "John Doe", age: 30 }\
CALL JSON.GET.OBJECT(JSON.STRING, JSON.ARRAY, ERR)
TEST=57 ; DESC="Unquoted Keys" ; EXPECTED=\Error: Expected key string at position:3\ ; VALUE=JSON.ARRAY:ERR ; GOSUB SHOW.RESULT
*
JSON.STRING = \{ 'name': 'John Doe', 'age': 30 }\
CALL JSON.GET.OBJECT(JSON.STRING, JSON.ARRAY, ERR)
TEST=58 ; DESC="Single Quotes Instead of Double Quotes" ; EXPECTED=\Error: Expected key string at position:3\ ; VALUE=JSON.ARRAY:ERR ; GOSUB SHOW.RESULT
*
JSON.STRING = \{ "name": "John Doe", // This is the person's name "age": 30 /* This is their age */ }\
CALL JSON.GET.OBJECT(JSON.STRING, JSON.ARRAY, ERR)
TEST=59 ; DESC="Comments (Not Allowed in JSON)" ; EXPECTED=\Error: Expected key string at position:23\ ; VALUE=JSON.ARRAY:ERR ; GOSUB SHOW.RESULT
*
JSON.STRING = \{ "name": undefined, "age": 30 }\
CALL JSON.GET.OBJECT(JSON.STRING, JSON.ARRAY, ERR)
TEST=60 ; DESC="Undefined Value" ; EXPECTED=\Error: Invalid value type at position:11\ ; VALUE=JSON.ARRAY:ERR ; GOSUB SHOW.RESULT
*
JSON.STRING = \{ "name": "John Doe", "value": NaN, "limit": Infinity }\
CALL JSON.GET.OBJECT(JSON.STRING, JSON.ARRAY, ERR)
TEST=61 ; DESC="NaN" ; EXPECTED=\Error: Invalid value type at position:32\ ; VALUE=JSON.ARRAY:ERR ; GOSUB SHOW.RESULT
*
JSON.STRING = \{ "name": "John Doe", "limit": Infinity }\
CALL JSON.GET.OBJECT(JSON.STRING, JSON.ARRAY, ERR)
TEST=62 ; DESC="Infinity" ; EXPECTED=\Error: Invalid value type at position:32\ ; VALUE=JSON.ARRAY:ERR ; GOSUB SHOW.RESULT
*
JSON.STRING = '{ "message": "This is a new\line" }'
CALL JSON.GET.OBJECT(JSON.STRING, JSON.ARRAY, ERR)
TEST=63 ; DESC="Incorrectly Escaped Characters" ; EXPECTED=\Error: Invalid escape in string at position:29\ ; VALUE=JSON.ARRAY:ERR ; GOSUB SHOW.RESULT
*
JSON.STRING = \{ "name": "John Doe" }   extra text\
JSON.STRING = \{ "name": "John Doe" }   extra text\
CALL JSON.GET.OBJECT(JSON.STRING, JSON.ARRAY, ERR)
TEST=59 ; DESC="Extra Characters" ; EXPECTED=\Error: Characters after closing bracket at position 26\ ; VALUE=JSON.ARRAY:ERR ; GOSUB SHOW.RESULT
*
JSON.STRING = \{ "name": "John Doe", "name": "Jane Doe" }\
CALL JSON.GET.OBJECT(JSON.STRING, JSON.ARRAY, ERR)
TEST=65 ; DESC="Duplicate Key" ; EXPECTED=\Error: Duplicate key "name" detected at position:31\ ; VALUE=JSON.ARRAY:ERR ; GOSUB SHOW.RESULT
*
JSON.STRING = \{ ["name": "John Doe", "name2": "Jane Doe"] }\
CALL JSON.GET.OBJECT(JSON.STRING, JSON.ARRAY, ERR)
TEST=66 ; DESC="Anonymous Array" ; EXPECTED=\Error: Expected key string at position:3\ ; VALUE=JSON.ARRAY:ERR ; GOSUB SHOW.RESULT
*
JSON.STRING = ' {"name":"John Doe","age":30,"address":{"street":"123 Main St","city":"Anytown"},'
JSON.STRING:= ' "phones":["555-1234","555-5678",{"Phone": "555-1212", "Ext": 1234}] }'
*
CALL JSON.GET.QUERY(JSON.STRING, '.name', RESULT, ERR)
TEST=67 ; DESC="Query Parse OK"      ; EXPECTED=""                                        ; VALUE=ERR        ; GOSUB SHOW.RESULT
TEST=68 ; DESC="Query Attrib"        ; EXPECTED="John Doe"                                ; VALUE=RESULT:ERR ; GOSUB SHOW.RESULT
*
CALL JSON.GET.QUERY(JSON.STRING, '.address.city', RESULT, ERR)
TEST=69 ; DESC="Query Attrib Nested" ; EXPECTED="Anytown"                                 ; VALUE=RESULT:ERR ; GOSUB SHOW.RESULT
*
CALL JSON.GET.QUERY(JSON.STRING, '.phones.[1]', RESULT, ERR)
TEST=70 ; DESC="Query Array"         ; EXPECTED="555-1234"                                ; VALUE=RESULT:ERR ; GOSUB SHOW.RESULT
*
CALL JSON.GET.QUERY(JSON.STRING, '.phones.[3].Ext', RESULT, ERR)
TEST=71 ; DESC="Query Array Nested"  ; EXPECTED="1234"                                    ; VALUE=RESULT:ERR ; GOSUB SHOW.RESULT
*
CALL JSON.GET.QUERY(JSON.STRING, 'name', RESULT, ERR)
TEST=72 ; DESC="Missing root ."      ; EXPECTED="Error: Invalid query, must start with ." ; VALUE=RESULT:ERR ; GOSUB SHOW.RESULT
*
CALL JSON.GET.QUERY(JSON.STRING, '.', RESULT, ERR)
EXPECTED.PRETTY = "{"
EXPECTED.PRETTY<-1>='  "name": "John Doe",'
EXPECTED.PRETTY<-1>='  "age": 30,'
EXPECTED.PRETTY<-1>='  "address": {'
EXPECTED.PRETTY<-1>='    "street": "123 Main St",'
EXPECTED.PRETTY<-1>='    "city": "Anytown"'
EXPECTED.PRETTY<-1>='  },'
EXPECTED.PRETTY<-1>='  "phones": ['
EXPECTED.PRETTY<-1>='    "555-1234",'
EXPECTED.PRETTY<-1>='    "555-5678",'
EXPECTED.PRETTY<-1>='    {'
EXPECTED.PRETTY<-1>='      "Phone": "555-1212",'
EXPECTED.PRETTY<-1>='      "Ext": 1234'
EXPECTED.PRETTY<-1>='    }'
EXPECTED.PRETTY<-1>='  ]'
EXPECTED.PRETTY<-1>='}'
TEST=73 ; DESC="Null query pretty"    ; EXPECTED=EXPECTED.PRETTY                         ; VALUE=RESULT:ERR ; GOSUB SHOW.RESULT
*
CALL JSON.GET.QUERY(JSON.STRING, '.missing', RESULT, ERR)
TEST=74 ; DESC="Missing attribute"   ; EXPECTED="Error: Attribute missing not found"      ; VALUE=RESULT:ERR ; GOSUB SHOW.RESULT
*
CALL JSON.GET.QUERY(JSON.STRING, '.[1]', RESULT, ERR)
TEST=75 ; DESC="Array expected"      ; EXPECTED="Error: mismatched query type"            ; VALUE=RESULT:ERR ; GOSUB SHOW.RESULT
*
CALL JSON.GET.QUERY(JSON.STRING, '.phones.[4]', RESULT, ERR)
TEST=76 ; DESC="Array out of bounds" ; EXPECTED="Error: invalid array index > 3"          ; VALUE=RESULT:ERR ; GOSUB SHOW.RESULT
*
CALL JSON.GET.QUERY(JSON.STRING, '.phones.[a]', RESULT, ERR)
TEST=77 ; DESC="Invalid array index" ; EXPECTED="Error: invalid array index:a"            ; VALUE=RESULT:ERR ; GOSUB SHOW.RESULT
*
CALL JSON.GET.QUERY(JSON.STRING, '.phones.[0]', RESULT, ERR)
TEST=78 ; DESC="Invalid array index" ; EXPECTED="Error: invalid array index < 1"          ; VALUE=RESULT:ERR ; GOSUB SHOW.RESULT
*
* Additional tests for JSON.GET.QUERY
* Test for nested arrays
JSON.STRING = '{"nestedArrays":[[1,2,3],[4,5,6],[7,8,9]]}'
CALL JSON.GET.QUERY(JSON.STRING, '.nestedArrays.[2].[3]', RESULT, ERR)
TEST=79 ; DESC="Query nested array"   ; EXPECTED="6"                                     ; VALUE=RESULT:ERR ; GOSUB SHOW.RESULT
*
* Test for property names with special characters
JSON.STRING = '{"special names":{"with space":"value","with-dash":"dash-value"}}'
CALL JSON.GET.QUERY(JSON.STRING, '.special names.with space', RESULT, ERR)
TEST=80 ; DESC="Query prop with space"; EXPECTED="value"                                 ; VALUE=RESULT:ERR ; GOSUB SHOW.RESULT
CALL JSON.GET.QUERY(JSON.STRING, '.special names.with-dash', RESULT, ERR)
TEST=81 ; DESC="Query prop with dash" ; EXPECTED="dash-value"                            ; VALUE=RESULT:ERR ; GOSUB SHOW.RESULT
*
* Test for empty objects and arrays
JSON.STRING = '{"emptyObject":{},"emptyArray":[]}'
CALL JSON.GET.QUERY(JSON.STRING, '.emptyObject', RESULT, ERR)
TEST=82 ; DESC="Query empty object"   ; EXPECTED="{}"                                    ; VALUE=RESULT:ERR ; GOSUB SHOW.RESULT
CALL JSON.GET.QUERY(JSON.STRING, '.emptyArray', RESULT, ERR)
TEST=83 ; DESC="Query empty array"    ; EXPECTED='[':@AM:']'                             ; VALUE=RESULT:ERR ; GOSUB SHOW.RESULT
*
* Test for deep nesting (4+ levels)
JSON.STRING = '{"level1":{"level2":{"level3":{"level4":"deep value"}}}}'
CALL JSON.GET.QUERY(JSON.STRING, '.level1.level2.level3.level4', RESULT, ERR)
TEST=84 ; DESC="Query deep nesting"   ; EXPECTED="deep value"                            ; VALUE=RESULT:ERR ; GOSUB SHOW.RESULT
*
* Test for various data types
JSON.STRING = '{"boolean":true,"nullValue":null,"numeric":12345.67}'
CALL JSON.GET.QUERY(JSON.STRING, '.boolean', RESULT, ERR)
TEST=85 ; DESC="Query boolean"        ; EXPECTED="true"                                  ; VALUE=RESULT:ERR ; GOSUB SHOW.RESULT
CALL JSON.GET.QUERY(JSON.STRING, '.nullValue', RESULT, ERR)
TEST=86 ; DESC="Query null"           ; EXPECTED="null"                                  ; VALUE=RESULT:ERR ; GOSUB SHOW.RESULT
CALL JSON.GET.QUERY(JSON.STRING, '.numeric', RESULT, ERR)
TEST=87 ; DESC="Query numeric"        ; EXPECTED="12345.67"                              ; VALUE=RESULT:ERR ; GOSUB SHOW.RESULT
*
* Test for array with mixed content types
JSON.STRING = '{"mixedArray":[42,"text",true,null,{"key":"value"},[1,2]]}'
CALL JSON.GET.QUERY(JSON.STRING, '.mixedArray.[1]', RESULT, ERR)
TEST=88 ; DESC="Query mixed array num"; EXPECTED="42"                                    ; VALUE=RESULT:ERR ; GOSUB SHOW.RESULT
CALL JSON.GET.QUERY(JSON.STRING, '.mixedArray.[2]', RESULT, ERR)
TEST=89 ; DESC="Query mixed arr text" ; EXPECTED="text"                                  ; VALUE=RESULT:ERR ; GOSUB SHOW.RESULT
CALL JSON.GET.QUERY(JSON.STRING, '.mixedArray.[5]', RESULT, ERR)
TEST=90 ; DESC="Query mixed arr obj"  ; EXPECTED='{':@AM:'  "key": "value"':@AM:'}'      ; VALUE=RESULT:ERR ; GOSUB SHOW.RESULT
CALL JSON.GET.QUERY(JSON.STRING, '.mixedArray.[5].key', RESULT, ERR)
TEST=91 ; DESC="Query mixed arr chain"; EXPECTED="value"                                 ; VALUE=RESULT:ERR ; GOSUB SHOW.RESULT
*
* Test for escaped characters in property names
JSON.STRING = '{"escaped\"quote":{"value":"quoted property"}}'
CALL JSON.GET.QUERY(JSON.STRING, '.escaped\"quote.value', RESULT, ERR) ;* TODO: Not sure if this should remain escaped
TEST=92 ; DESC="Query escaped prop"   ; EXPECTED="quoted property"                       ; VALUE=RESULT:ERR ; GOSUB SHOW.RESULT
*
JSON.STRING = \{ "name": "John Doe" }    \:CHAR(9):\  \
CALL JSON.GET.OBJECT(JSON.STRING, JSON.ARRAY, ERR)
TEST=93 ; DESC="Extra Whitespace Ignored" ; EXPECTED=\John Doe\ ; VALUE=JSON.ARRAY<3,1>:ERR ; GOSUB SHOW.RESULT
*
* Test for trailing comma in array
JSON.STRING = '[1, 2, 3, ]'
CALL JSON.GET.ARRAY(JSON.STRING, COMMA.TEST, ERR)
TEST=94 ; DESC="TRAILING COMMA" ; EXPECTED="Error: Trailing comma in array at position:11" ; VALUE=ERR ; GOSUB SHOW.RESULT
*
* Test for leading comma in array
JSON.STRING = '[, 1, 2, 3]'
CALL JSON.GET.ARRAY(JSON.STRING, COMMA.TEST, ERR)
TEST=95 ; DESC="LEADING COMMA" ; EXPECTED="Error: Invalid value type at position:2" ; VALUE=ERR ; GOSUB SHOW.RESULT
*
* Test for invalid literal
JSON.STRING = '[tru, false, null]'
CALL JSON.GET.ARRAY(JSON.STRING, LITERAL.TEST, ERR)
TEST=96 ; DESC="INVALID LITERAL" ; EXPECTED="Error: Invalid value type at position:2" ; VALUE=ERR ; GOSUB SHOW.RESULT
*
* Test for malformed number
JSON.STRING = '[123, 45.67.89, 42]'
CALL JSON.GET.ARRAY(JSON.STRING, NUMBER.TEST, ERR)
TEST=97 ; DESC="MALFORMED NUMBER" ; EXPECTED="Error: Invalid number at position:15" ; VALUE=ERR ; GOSUB SHOW.RESULT
*
* Test for empty input string
JSON.STRING = ''
CALL JSON.GET.ARRAY(JSON.STRING, RESULT, ERR)
TEST=98 ; DESC="Empty input string" ; EXPECTED="Error: Empty string" ; VALUE=ERR ; GOSUB SHOW.RESULT
*
* Test for input not starting with "["
JSON.STRING = '{1,2,3}'
CALL JSON.GET.ARRAY(JSON.STRING, RESULT, ERR)
TEST=99 ; DESC="Not starting with [" ; EXPECTED="Error: Not a JSON array at position:1" ; VALUE=ERR ; GOSUB SHOW.RESULT
*
* Test for unterminated object in array
JSON.STRING = '[1, {"key": "value"]'
CALL JSON.GET.ARRAY(JSON.STRING, RESULT, ERR)
TEST=100 ; DESC="Unterminated object" ; EXPECTED="Error: Unterminated object in array at position:21" ; VALUE=ERR ; GOSUB SHOW.RESULT
*
* Test for unterminated nested array
JSON.STRING = '[1, [2, 3]'
CALL JSON.GET.ARRAY(JSON.STRING, RESULT, ERR)
TEST=101 ; DESC="Unterminated nested array" ; EXPECTED="Error: Missing closing bracket" ; VALUE=ERR ; GOSUB SHOW.RESULT
*
* Test for characters after closing bracket
JSON.STRING = '[1, 2, 3] extra'
CALL JSON.GET.ARRAY(JSON.STRING, RESULT, ERR)
TEST=102 ; DESC="Chars after closing bracket" ; EXPECTED="Error: Characters after closing bracket at position:11" ; VALUE=ERR ; GOSUB SHOW.RESULT
*
* Test for unterminated string in array
JSON.STRING = '[1, "unterminated]'
CALL JSON.GET.ARRAY(JSON.STRING, RESULT, ERR)
TEST=103 ; DESC="Unterminated string" ; EXPECTED="Error: Unterminated string at position:19" ; VALUE=ERR ; GOSUB SHOW.RESULT
*
* Test for invalid escape sequence
JSON.STRING = '[1, "invalid escape \z"]'
CALL JSON.GET.ARRAY(JSON.STRING, RESULT, ERR)
TEST=104 ; DESC="Invalid escape sequence" ; EXPECTED="Error: Invalid escape in string at position:22" ; VALUE=ERR ; GOSUB SHOW.RESULT
*
* Test for invalid Unicode escape sequence
JSON.STRING = '[1, "valid unicode \u00E9", "invalid unicode \u00ZZ"]'
CALL JSON.GET.ARRAY(JSON.STRING, RESULT, ERR)
TEST=105 ; DESC="Invalid Unicode escape" ; EXPECTED="Error: Invalid Unicode escape sequence at position:47" ; VALUE=ERR ; GOSUB SHOW.RESULT
*
* Tests for JSON.PRETTY.PRINT
JSON.STRING = '{"a":1,"b":[true,null,{"c":"d"}]}'
EXPECTED.PRETTY = "{"
EXPECTED.PRETTY<-1>='  "a": 1,'
EXPECTED.PRETTY<-1>='  "b": ['
EXPECTED.PRETTY<-1>='    true,'
EXPECTED.PRETTY<-1>='    null,'
EXPECTED.PRETTY<-1>='    {'
EXPECTED.PRETTY<-1>='      "c": "d"'
EXPECTED.PRETTY<-1>='    }'
EXPECTED.PRETTY<-1>='  ]'
EXPECTED.PRETTY<-1>='}'
CALL JSON.PRETTY.PRINT(JSON.STRING, 0, RESULT, ERR)
TEST=106 ; DESC="Pretty Print Object" ; EXPECTED=EXPECTED.PRETTY ; VALUE=RESULT:ERR ; GOSUB SHOW.RESULT
*
JSON.STRING = '[1,{"a":"b"},[2,3],false]'
EXPECTED.PRETTY = "["
EXPECTED.PRETTY<-1>='  1,'
EXPECTED.PRETTY<-1>='  {'
EXPECTED.PRETTY<-1>='    "a": "b"'
EXPECTED.PRETTY<-1>='  },'
EXPECTED.PRETTY<-1>='  ['
EXPECTED.PRETTY<-1>='    2,'
EXPECTED.PRETTY<-1>='    3'
EXPECTED.PRETTY<-1>='  ],'
EXPECTED.PRETTY<-1>='  false'
EXPECTED.PRETTY<-1>=']'
CALL JSON.PRETTY.PRINT(JSON.STRING, 0, RESULT, ERR)
TEST=107 ; DESC="Pretty Print Array" ; EXPECTED=EXPECTED.PRETTY ; VALUE=RESULT:ERR ; GOSUB SHOW.RESULT
*
CRT 'Tests:':PASS+FAIL
CRT 'Pass :':PASS
CRT 'Fail :':FAIL
STOP
*
SHOW.RESULT:
  CRT TEST'R#3':' ':DESC'L#30':' ':
  IF EXPECTED=VALUE THEN
    CRT 'OK'
    PASS+=1
  END ELSE
    CRT 'FAIL-EXPECTED:':EXPECTED:' GOT:':VALUE
    FAIL+=1
  END
RETURN
*
