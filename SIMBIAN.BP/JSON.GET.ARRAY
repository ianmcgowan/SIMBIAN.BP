SUBROUTINE JSON.GET.ARRAY(JSON.STRING, RESULT, ERR)
  * Parse a JSON array into a dynamic array
  * Input : JSON.STRING - A JSON string starting with '['
  * Output: RESULT      - A dynamic array with array elements parsed into rows
  *         ERR         - Any error messages, with a position
  *
  CONVERT @AM TO " " IN JSON.STRING ;* Don't have to deal with line delimiters
  CONVERT CHAR(10) TO " " IN JSON.STRING
  CONVERT CHAR(13) TO "" IN JSON.STRING
  JSON.LEN = LEN(JSON.STRING)
  RESULT = ""
  ERR=""
  *
  IF TRIM(JSON.STRING) = "" THEN
    ERR = "Error: Empty string"
    RETURN
  END
  *
  POS=1
  GOSUB SKIP.WHITESPACE
  IF JSON.STRING[POS,1] <> "[" THEN
    ERR="Error: Not a JSON array at position:":POS
    RETURN
  END
  POS+=1
  CLOSING.BRACKET=0
*
* States for our FSM
  STATE.EXPECT_VALUE = 1
  STATE.EXPECT_COMMA_OR_END = 2
*
  CURRENT.STATE = STATE.EXPECT_VALUE
  ELEMENT.COUNT = 0
*
  LOOP WHILE POS <= JSON.LEN
    GOSUB SKIP.WHITESPACE
    *
    IF POS > JSON.LEN THEN
      ERR="Error: Unterminated array"
      RETURN
    END
    *
    C = JSON.STRING[POS,1]
    *
    BEGIN CASE
      CASE CURRENT.STATE = STATE.EXPECT_VALUE
        IF C = "]" THEN
          * Empty array or end of array
          IF ELEMENT.COUNT > 0 THEN
            * Expecting a value, but got end of array, there's a trailing comma
            ERR="Error: Trailing comma in array at position:":POS
            RETURN
          END
          POS = POS + 1
          CLOSING.BRACKET=1
          EXIT
        END
        *
        ELEMENT.COUNT = ELEMENT.COUNT + 1
        ELEMENT.START = POS
        *
        BEGIN CASE
          CASE C = "{"  ;* Object
            NESTING = 1
            POS = POS + 1
            LOOP WHILE POS <= JSON.LEN AND NESTING > 0
              BEGIN CASE
                CASE JSON.STRING[POS,1] = "{"
                  NESTING = NESTING + 1
                CASE JSON.STRING[POS,1] = "}"
                  NESTING = NESTING - 1
                CASE JSON.STRING[POS,1] = CHAR(34)
                  GOSUB SKIP.STRING
                  IF ERR <> '' THEN RETURN
              END CASE
              POS = POS + 1
            REPEAT
            IF NESTING > 0 THEN
              ERR="Error: Unterminated object in array at position:":POS
              RETURN
            END
            ELEMENT = JSON.STRING[ELEMENT.START, POS-ELEMENT.START]
            RESULT<ELEMENT.COUNT> = ELEMENT
          CASE C = "["  ;* Array
            NESTING = 1
            POS = POS + 1
            LOOP WHILE POS <= JSON.LEN AND NESTING > 0
              BEGIN CASE
                CASE JSON.STRING[POS,1] = "["
                  NESTING = NESTING + 1
                CASE JSON.STRING[POS,1] = "]"
                  NESTING = NESTING - 1
                CASE JSON.STRING[POS,1] = CHAR(34)
                  GOSUB SKIP.STRING
                  IF ERR <> '' THEN RETURN
              END CASE
              POS = POS + 1
            REPEAT
            IF NESTING > 0 THEN
              ERR="Error: Unterminated nested array at position:":POS
              RETURN
            END
            ELEMENT = JSON.STRING[ELEMENT.START, POS-ELEMENT.START]
            RESULT<ELEMENT.COUNT> = ELEMENT
          CASE C = CHAR(34)  ;* String
            GOSUB SKIP.STRING
            IF ERR <> '' THEN RETURN
            POS = POS + 1
            ELEMENT = JSON.STRING[ELEMENT.START, POS-ELEMENT.START]
            ELEMENT = ELEMENT[2,LEN(ELEMENT)-2] ;* Remove quotes
            RESULT<ELEMENT.COUNT> = ELEMENT
          CASE JSON.STRING[POS,4] = "true"
            RESULT<ELEMENT.COUNT>="true"
            POS = POS + 4
          CASE JSON.STRING[POS,5] = "false"
            RESULT<ELEMENT.COUNT>="false"
            POS = POS + 5
          CASE JSON.STRING[POS,4] = "null"
            RESULT<ELEMENT.COUNT>="null"
            POS = POS + 4
          CASE C = "-" OR C MATCHES "1N"  ;* Number
            LOOP WHILE POS <= JSON.LEN
              C = JSON.STRING[POS,1]
              IF C <> "-" AND C <> "." AND C <> "e" AND C <> "E" AND C <> "+" AND NOT(C MATCHES "1N") THEN EXIT
              POS = POS + 1
            REPEAT
            ELEMENT = JSON.STRING[ELEMENT.START, POS-ELEMENT.START]
            IF NOT(NUM(ELEMENT)) THEN
              ERR="Error: Invalid number at position:":POS
              RETURN
            END
            RESULT<ELEMENT.COUNT> = ELEMENT
          CASE 1
            ERR="Error: Invalid value type at position:":POS
            RETURN
        END CASE
        CURRENT.STATE = STATE.EXPECT_COMMA_OR_END
      CASE CURRENT.STATE = STATE.EXPECT_COMMA_OR_END
        IF C = "]" THEN
        * End of array
          POS = POS + 1
          CLOSING.BRACKET=1
          EXIT
        END ELSE IF C = "," THEN
          POS = POS + 1
          CURRENT.STATE = STATE.EXPECT_VALUE
        END ELSE
          ERR="Error: Expected comma or closing bracket at position:":POS
          RETURN
        END
    END CASE
  REPEAT
  *
  IF NOT(CLOSING.BRACKET) THEN
    ERR="Error: Missing closing bracket"
  END ELSE
    GOSUB SKIP.WHITESPACE
    IF POS < JSON.LEN THEN
      ERR="Error: Characters after closing bracket at position:":POS
    END
  END
RETURN
*
SKIP.WHITESPACE:
  LOOP WHILE POS <= JSON.LEN
    C = JSON.STRING[POS,1]
    IF C <> " " AND C <> CHAR(9) AND C <> CHAR(10) AND C <> CHAR(13) THEN EXIT
    POS = POS + 1
  REPEAT
RETURN
*
SKIP.STRING:
  POS = POS + 1
  LOOP WHILE POS <= JSON.LEN
    C = JSON.STRING[POS,1]
    C.PREV=JSON.STRING[POS-1,1]
    IF C = CHAR(34) AND C.PREV <> "\" THEN EXIT
    IF C="\" THEN
      * Check for allowed escape characters
      POS = POS + 1
      IF POS > JSON.LEN THEN
        ERR = "Error: Unterminated escape sequence at position:":POS
        RETURN
      END
      C.NEXT = JSON.STRING[POS,1]
      BEGIN CASE
        CASE C.NEXT='"' OR C.NEXT="\" OR C.NEXT="/" OR C.NEXT="b" OR C.NEXT="f" OR C.NEXT="n" OR C.NEXT="r" OR C.NEXT="t"
          POS = POS + 1
        CASE C.NEXT="u"
          IF POS + 4 > JSON.LEN THEN
            ERR = "Error: Unterminated Unicode escape sequence at position:":POS
            RETURN
          END
          UNICODE.PART = JSON.STRING[POS+1,4]
          * Check each character is a valid hex digit (0-9, A-F)
          IS.VALID = 1
          FOR I = 1 TO 4
            CHAR = UNICODE.PART[I,1]
            CHAR.CODE = UPCASE(SEQ(CHAR))
            IF NOT(CHAR MATCHES "1N") AND NOT((CHAR.CODE >= 65 AND CHAR.CODE <= 70)) THEN
              * NOT 0-9 OR A-F
              IS.VALID = 0
              EXIT
            END
          NEXT I
          IF NOT(IS.VALID) THEN
            ERR = "Error: Invalid Unicode escape sequence at position:":POS
            RETURN
          END
          POS = POS + 4
        CASE 1
          ERR="Error: Invalid escape in string at position:":POS
          RETURN
      END CASE
    END
    POS = POS + 1
  REPEAT
  IF POS > JSON.LEN THEN
    ERR = "Error: Unterminated string at position:":POS
    RETURN
  END
RETURN
*
