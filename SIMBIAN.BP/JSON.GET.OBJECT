SUBROUTINE JSON.GET.OBJECT(JSON.STRING, RESULT, ERR)
  * Parse a JSON object into a dynamic array
  * Input : JSON.STRING - A JSON object starting with '{' E.g. { "name": value, "name2": value2 } - this is modified!
  * Output: RESULT - A dynamic array with keys in attribute 1, types in attribute 2 and values in attribute 3
  *         Values may contain complex objects or arrays - call JSON.GET.OBJECT or JSON.GET.ARRAY to parse those
  *         ERR - Any error messages, with a position.  PRINT JSON.STRING ; PRINT SPACE(ERR.POS-1):"^" to view from caller
  * Note  : We expect the json to be well-formed, so don't check for all possible errors. If in doubt, use https://jsonlint.com
  CONVERT @AM TO " " IN JSON.STRING ;* Flatten the JSON, don't deal with multiple lines
  CONVERT CHAR(10) TO " " IN JSON.STRING
  CONVERT CHAR(13) TO "" IN JSON.STRING
  JSON.LEN = LEN(JSON.STRING)
  RESULT = ""
  ERR=""
  *
  IF TRIM(JSON.STRING) = "" THEN
    ERR = "Error: Empty string"
    RETURN
  END
  POS=1
  GOSUB SKIP.WHITESPACE
  IF JSON.STRING[POS,1] <> "{" THEN
    ERR="Error: Not a JSON object at position ":POS
    RETURN
  END
  POS = POS + 1
  CLOSING.BRACKET=0
  *
  * States for our FSM
  STATE.EXPECT_KEY = 1
  STATE.EXPECT_COLON = 2
  STATE.EXPECT_VALUE = 3
  STATE.EXPECT_COMMA_OR_END = 4
  *
  CURRENT.STATE = STATE.EXPECT_KEY
  CURRENT.KEY = ""
  *
  LOOP WHILE POS <= JSON.LEN
    GOSUB SKIP.WHITESPACE
    IF POS > JSON.LEN THEN EXIT
    *
    C = JSON.STRING[POS,1]
    *
    BEGIN CASE
      CASE CURRENT.STATE = STATE.EXPECT_KEY
        IF C = "}" THEN
          * Empty object or end of object
          POS = POS + 1
          CONTINUE
        END
        *
        IF C <> CHAR(34) THEN
          ERR="Error: Expected key string at position ":POS
          RESULT=""
          RETURN
        END
        *
        KEY.START = POS + 1
        POS = POS + 1
        GOSUB SKIP.STRING
        IF ERR <> "" THEN RETURN
        CURRENT.KEY = JSON.STRING[KEY.START, POS-KEY.START]
        POS = POS + 1
        CURRENT.STATE = STATE.EXPECT_COLON
      CASE CURRENT.STATE = STATE.EXPECT_COLON
        IF C <> ":" THEN
          ERR="Error: Expected : at position ":POS
          RESULT=""
          RETURN
        END
        POS = POS + 1
        CURRENT.STATE = STATE.EXPECT_VALUE
      CASE CURRENT.STATE = STATE.EXPECT_VALUE
        * Value can be one of: object, array, string, literal, number
        VALUE.START = POS
        VALUE = ""
        *
        BEGIN CASE
          CASE C = "{"  ;* Object
            VALUE.TYPE="OBJECT"
            NESTING = 1
            POS = POS + 1
            LOOP WHILE POS <= JSON.LEN AND NESTING > 0
              BEGIN CASE
                CASE JSON.STRING[POS,1] = "{"
                  NESTING = NESTING + 1
                CASE JSON.STRING[POS,1] = "}"
                  NESTING = NESTING - 1
                CASE JSON.STRING[POS,1] = CHAR(34)
                  GOSUB SKIP.STRING
                  IF ERR <> '' THEN RETURN
                CASE 1
                  NULL ;* Slurp all characters into the object
              END CASE
              POS = POS + 1
            REPEAT
          CASE C = "["  ;* Array
            VALUE.TYPE="ARRAY"
            NESTING = 1
            POS = POS + 1
            LOOP WHILE POS <= JSON.LEN AND NESTING > 0
              BEGIN CASE
                CASE JSON.STRING[POS,1] = "["
                  NESTING = NESTING + 1
                CASE JSON.STRING[POS,1] = "]"
                  NESTING = NESTING - 1
                CASE JSON.STRING[POS,1] = CHAR(34)
                  GOSUB SKIP.STRING
                  IF ERR <> '' THEN RETURN
                CASE 1
                  NULL ;* Slurp all characters into array
              END CASE
              POS = POS + 1
            REPEAT
          CASE C = CHAR(34)  ;* String
            VALUE.TYPE="STRING"
            GOSUB SKIP.STRING
            IF ERR <> '' THEN RETURN
            POS = POS + 1
          CASE JSON.STRING[POS,4] = "true" ;* Literal
            VALUE.TYPE="LITERAL"
            POS = POS + 4
          CASE JSON.STRING[POS,5] = "false" ;* Literal
            VALUE.TYPE="LITERAL"
            POS = POS + 5
          CASE JSON.STRING[POS,4] = "null" ;* Literal
            VALUE.TYPE="LITERAL"
            POS = POS + 4
          CASE C = "-" OR C MATCHES "1N"  ;* Number
            VALUE.TYPE="NUMBER"
            LOOP WHILE POS <= JSON.LEN
              C = JSON.STRING[POS,1]
              IF C <> "-" AND C <> "." AND C <> "e" AND C <> "E" AND C <> "+" AND NOT(C MATCHES "1N") THEN EXIT
              POS = POS + 1
            REPEAT
          CASE 1
            ERR="Error: Invalid value type at position ":POS
            RESULT=""
            RETURN
        END CASE
        *
        VALUE = JSON.STRING[VALUE.START, POS-VALUE.START]
        IF VALUE.TYPE="STRING" THEN
          SWAP '\"' WITH '"' IN VALUE
          VALUE=VALUE[2,LEN(VALUE)-2] ;* Remove quotes
        END
        *
        * Add the key-value pair to our result
        LOCATE CURRENT.KEY IN RESULT<1> SETTING DUMMY THEN
          ERR=\Error: Duplicate key "\:CURRENT.KEY:\" detected at position \:VALUE.START
          RESULT=""
          RETURN
        END
        RESULT<1,-1> = CURRENT.KEY
        RESULT<2,-1> = VALUE.TYPE
        RESULT<3,-1> = VALUE
        CURRENT.STATE = STATE.EXPECT_COMMA_OR_END
      CASE CURRENT.STATE = STATE.EXPECT_COMMA_OR_END
        BEGIN CASE
          CASE C = "}"
            * End of object
            POS = POS + 1
            CLOSING.BRACKET=1
            EXIT
          CASE C = ","
            POS = POS + 1
            CURRENT.STATE = STATE.EXPECT_KEY
          CASE 1
            ERR="Error: Expected comma or closing brace at position ":POS
            RESULT=""
            RETURN
        END CASE
    END CASE
  REPEAT
  IF NOT(CLOSING.BRACKET) THEN
    ERR="Error: Missing closing bracket"
    RESULT=""
  END ELSE
    GOSUB SKIP.WHITESPACE
    IF POS < JSON.LEN THEN
      ERR="Error: Characters after closing bracket at position ":POS
      RESULT=""
    END
  END
RETURN
*
SKIP.WHITESPACE: 
  LOOP WHILE POS <= JSON.LEN
    C = JSON.STRING[POS,1]
    IF C <> " " AND C <> CHAR(9) THEN EXIT
    POS = POS + 1
  REPEAT
RETURN
*
SKIP.STRING:
  POS = POS + 1
  LOOP WHILE POS <= JSON.LEN
    C = JSON.STRING[POS,1]
    C.PREV=JSON.STRING[POS-1,1]
    C.NEXT=JSON.STRING[POS+1,1]
    IF C = CHAR(34) AND C.PREV <> "\" THEN EXIT
    IF C="\" THEN
      * Check for allowed escape characters
      POS = POS + 1
      IF POS > JSON.LEN THEN
        ERR = "Error: Unterminated escape sequence at position ":POS
        RETURN
      END
      C.NEXT = JSON.STRING[POS,1]
      BEGIN CASE
        CASE C.NEXT='"' OR C.NEXT="\" OR C.NEXT="/" OR C.NEXT="b" OR C.NEXT="f" OR C.NEXT="n" OR C.NEXT="r" OR C.NEXT="t"
          POS = POS + 1
        CASE C.NEXT="u"
          IF POS + 4 > JSON.LEN THEN
            ERR = "Error: Unterminated Unicode escape sequence at position ":POS
            RETURN
          END
          UNICODE.PART = JSON.STRING[POS+1,4]
          IF NOT(UNICODE.PART MATCHES "4X") THEN
            ERR = "Error: Invalid Unicode escape sequence at position ":POS
            RETURN
          END
          POS = POS + 4
        CASE 1
          ERR="Error: Invalid escape in string at position ":POS
          RETURN
      END CASE
    END
    POS = POS + 1
  REPEAT
  IF POS > JSON.LEN THEN
    ERR = "Error: Unterminated string at position ":POS
    RETURN
  END
RETURN
*
